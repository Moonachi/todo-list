{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoCategoryList.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["fixedCategory","categorysState","atom","key","default","lsCategory","localStorage","getItem","categorys","JSON","parse","willAdd","forEach","item","includes","push","categoryState","toDoState","lsTodoAll","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","style","margin","padding","map","Fragment","ToDoCategoryList","useRecoilState","setCategorys","setCategory","color","fontWeight","marginBottom","count","el","window","confirm","newCategorys","newToDoAll","ToDoList","toDosAll","useEffect","setItem","stringify","alert","length","prev","display","flex","value","onInput","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.ed2b655f.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport const fixedCategory = [\"TO DO\", \"DOING\", \"DONE\"] as const;\nexport type FixedCategory = typeof fixedCategory[number];\n\nexport type Categories = string;\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categorysState = atom<Categories[]>({\n  key: \"categorys\",\n  default: (() => {\n    const lsCategory = localStorage.getItem(\"categorys\");\n    const categorys = lsCategory ? JSON.parse(lsCategory) : [...fixedCategory];\n\n    const willAdd: string[] = [];\n    fixedCategory.forEach(item => {\n      if (categorys.includes(item)) return;\n      willAdd.push(item);\n    });\n\n    return [...categorys, ...willAdd];\n  })()\n});\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: fixedCategory[0]\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: (() => {\n    const lsTodoAll = localStorage.getItem(\"toDos\");\n    return lsTodoAll ? JSON.parse(lsTodoAll) : [];\n  })()\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter(toDo => toDo.category === category);\n  }\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos(oldToDos => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\"\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categorysState, IToDo, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const categorys = useRecoilValue(categorysState);\n  const setToDos = useSetRecoilState(toDoState);\n\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name }\n    } = event;\n    setToDos(oldToDos => {\n      const targetIndex = oldToDos.findIndex(toDo => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1)\n      ];\n    });\n  };\n\n  return (\n    <li style={{ margin: 10, padding: 10 }}>\n      <span>{text}</span>\n      <div>\n        {categorys.map(item => {\n          if (item === category)\n            return <React.Fragment key={item}></React.Fragment>;\n          return (\n            <button name={item} onClick={onClick} key={item}>\n              {item}\n            </button>\n          );\n        })}\n      </div>\n    </li>\n  );\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport {\n  categorysState,\n  categoryState,\n  FixedCategory,\n  fixedCategory,\n  toDoState\n} from \"../atoms\";\n\nfunction ToDoCategoryList() {\n  const [categorys, setCategorys] = useRecoilState(categorysState);\n  const setCategory = useSetRecoilState(categoryState);\n  const [toDos, setToDos] = useRecoilState(toDoState);\n\n  return (\n    <div>\n      <h2> - 카테고리 리스트</h2>\n      <p style={{ color: \"red\", fontWeight: \"bold\", marginBottom: 10 }}>\n        카테고리 삭제 시 해당 카테고리 내 항목 모두 삭제됩니다.\n      </p>\n      <ul>\n        {categorys.map(item => {\n          return (\n            <li key={item}>\n              <span>{item}</span>{\" \"}\n              <span>\n                {(() => {\n                  let count = 0;\n                  toDos.forEach(el => {\n                    if (el.category === item) count += 1;\n                  });\n                  return count;\n                })()}{\" \"}\n                개\n              </span>\n              {!fixedCategory.includes(item as FixedCategory) && (\n                <button\n                  onClick={() => {\n                    const confirm = window.confirm(\"정말 삭제하시겠습니까?\");\n\n                    if (!confirm) return;\n                    const newCategorys = categorys.filter(el => el !== item);\n                    setCategorys(newCategorys);\n\n                    const newToDoAll = toDos.filter(el => el.category !== item);\n                    setToDos(newToDoAll);\n\n                    setCategory(fixedCategory[0]);\n                  }}\n                >\n                  삭제하기\n                </button>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default ToDoCategoryList;\n","import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  categorysState,\n  categoryState,\n  toDoSelector,\n  toDoState\n} from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\nimport ToDoCategoryList from \"./ToDoCategoryList\";\n\ninterface ICustomCategory {\n  category: string;\n}\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const toDosAll = useRecoilValue(toDoState);\n  const [categorys, setCategorys] = useRecoilState(categorysState);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const { register, handleSubmit, setValue } = useForm<ICustomCategory>();\n\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  const handleValid = ({ category }: ICustomCategory) => {\n    if (categorys.includes(category)) {\n      alert(\"이미 있는 카테고리 입니다.\");\n    } else if (!category.length) {\n      alert(\"입력되지 않았습니다.\");\n    } else {\n      setCategorys(prev => [...prev, category]);\n      alert(\"카테고리 추가되었습니다.\");\n      setValue(\"category\", \"\");\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"categorys\", JSON.stringify(categorys));\n  }, [categorys]);\n\n  useEffect(() => {\n    localStorage.setItem(\"toDos\", JSON.stringify(toDosAll));\n  }, [toDosAll]);\n\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <p>대소문자를 구분하지 않습니다.</p>\n      <form onSubmit={handleSubmit(handleValid)}>\n        <input\n          {...register(\"category\", {\n            required: \"Please write a To Do\"\n          })}\n          placeholder=\"Write a new category\"\n        />\n        <button>Add</button>\n      </form>\n      <hr />\n\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flex: 1 }}>\n          <select value={category} onInput={onInput}>\n            {categorys.map(category => (\n              <option key={category} value={category}>\n                {category}\n              </option>\n            ))}\n          </select>\n          <CreateToDo />\n\n          {toDos?.map(toDo => (\n            <ToDo key={toDo.id} {...toDo} />\n          ))}\n        </div>\n        <div style={{ flex: 1 }}>\n          <ToDoCategoryList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}